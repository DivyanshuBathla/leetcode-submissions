/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
TreeNode *pred(TreeNode* aroot)
    {
        TreeNode* prev=aroot,*root=aroot;
        root=root->left;
        while(root!=NULL&&root!=aroot)
        {
            prev=root;
            root=root->right;
        }
        if(root==aroot){
        prev->right=NULL;
        return(NULL);
        }
        return prev;
    }
     int preorder(TreeNode *root,int low,int high)
    {
        int ans=0;
           while(root!=NULL){
            if(root->left)
            {
                TreeNode *predessor=pred(root);
                if(predessor)
                {
                    if(root->val>=low&&root->val<=high)
                    ans+=root->val;
                    predessor->right=root;
                    root=root->left;
                }
                else
                {
                    root=root->right;
                }
            }
            else
            {
                if(root->val>=low&&root->val<=high)
                    ans+=root->val;
                root=root->right;
            }
           }
            return ans;
    }
   
    int rangeSumBST(TreeNode* root, int low, int high) {
              return preorder(root,low,high);      
    }
};
